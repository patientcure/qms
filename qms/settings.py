"""
Django settings for qms project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
from firebase_admin import credentials
import firebase_admin
from pathlib import Path
from dotenv import load_dotenv
import json
from datetime import timedelta
from django.conf.urls.static import static
import dj_database_url

load_dotenv()

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=1200),  # change from 5m to 30m
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),     # change from 1d to 7d
}
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
CORS_ALLOWED_ORIGINS = [
    "http://127.0.0.1:8000", 
    "http://localhost:8000",
    "http://localhost:5173",
    "https://*.devtunnels.ms", 
    "https://qms-2h5c.onrender.com"
]



# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-5$m!b(3shj!@710d)s67+by0#4&+&660=grf%1l8!2_d9sp6@('

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'apps.accounts',
    'apps.quotations',
    'widget_tweaks',
    'corsheaders'
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware', 
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    )
}

ROOT_URLCONF = 'qms.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'qms.wsgi.application'

AUTH_USER_MODEL = 'accounts.User'
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
}
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'shhopsmartt@gmail.com'
EMAIL_HOST_PASSWORD = 'your_app_password'
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', 'shhopsmartt@gmail.com')

# Google Drive
GOOGLE_DRIVE_CREDENTIALS_FILE = os.getenv('GOOGLE_DRIVE_CREDENTIALS_FILE', 'service-account.json')
GOOGLE_DRIVE_PARENT_FOLDER_ID = os.getenv('GOOGLE_DRIVE_PARENT_FOLDER_ID')

# Quotation number format
QUOTATION_PREFIX = os.getenv('QUOTATION_PREFIX', 'QTN')

# Timezone & locale
TIME_ZONE = 'Asia/Kolkata'
USE_TZ = True

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

DATABASES = {
    "default": dj_database_url.parse(os.getenv("DATABASE_URL"), engine="django.db.backends.postgresql")
}



# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'
USE_I18N = True



# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

firebase_credentials_json = os.getenv('FIREBASE_CREDENTIALS_JSON')
firebase_credentials = None
if firebase_credentials_json:
    try:
        firebase_credentials = json.loads(firebase_credentials_json)
    except json.JSONDecodeError:
        print("Error: Could not decode FIREBASE_CREDENTIALS_JSON. Check your .env file.")
else:
    print("Warning: FIREBASE_CREDENTIALS_JSON environment variable not found.")

# 2. Initialize Firebase Admin SDK if credentials were loaded
if firebase_credentials:
    try:
        cred = credentials.Certificate(firebase_credentials)
        firebase_admin.initialize_app(cred, {
            'storageBucket': os.getenv('FIREBASE_STORAGE_BUCKET')
        })
        print("Firebase Admin SDK initialized successfully from a single environment variable.")
    except Exception as e:
        # Avoid crashing if the app is already initialized (e.g., in some testing scenarios)
        if 'already exists' not in str(e):
             print(f"Error initializing Firebase Admin SDK: {e}")

# 3. Configure django-storages to use Google Cloud Storage
DEFAULT_FILE_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'

# 4. Set Google Cloud Storage settings
GS_PROJECT_ID = os.getenv('FIREBASE_PROJECT_ID', firebase_credentials.get('project_id') if firebase_credentials else None)
GS_BUCKET_NAME = os.getenv('FIREBASE_STORAGE_BUCKET')

# django-storages will automatically use the initialized Firebase Admin credentials
GS_DEFAULT_ACL = 'publicRead'